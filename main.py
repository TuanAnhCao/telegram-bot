import telebot
import sqlite3
from telebot.types import ForceReply
from flask import Flask
from threading import Thread
import cloudinary
import cloudinary.uploader
import cloudinary.api
from telebot.formatting import escape_markdown
import time
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from datetime import datetime, timedelta
import io
import os
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# C·∫•u h√¨nh bot
TOKEN = os.environ.get("TELEGRAM_TOKEN", "7815604030:AAGvm050Cj-rkEPv39nYCGrFh8L3YzaL3Gw")  # L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
ADMIN_ID = 6283529520  # Thay b·∫±ng Telegram ID c·ªßa admin

# T·∫°o session v·ªõi retry
session = requests.Session()
retries = Retry(total=5, backoff_factor=1, status_forcelist=[502, 503, 504])
session.mount("https://", HTTPAdapter(max_retries=retries))

bot = telebot.TeleBot(TOKEN, threaded=True)

# C·∫•u h√¨nh Cloudinary
cloudinary.config(
    cloud_name="dwwm2nkt4",
    api_key="339732977831829",
    api_secret="4YAAnZVCh4mKevUtS8fsqpr2p-k"
)

# T·∫°o Flask app ƒë·ªÉ gi·ªØ bot ch·∫°y
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def run():
    app.run(host="0.0.0.0", port=8080)

def upload_to_cloudinary(local_file_path, cloudinary_path):
    try:
        response = cloudinary.uploader.upload(
            local_file_path,
            public_id=cloudinary_path,
            resource_type="raw",
            overwrite=True
        )
        logger.info(f"ƒê√£ upload {local_file_path} l√™n Cloudinary t·∫°i {cloudinary_path}")
    except Exception as e:
        logger.error(f"L·ªói khi upload l√™n Cloudinary: {str(e)}")

def download_from_cloudinary(cloudinary_path, local_file_path):
    try:
        url = cloudinary.api.resource(cloudinary_path, resource_type="raw")["url"]
        response = session.get(url, timeout=60)  # TƒÉng timeout l√™n 60 gi√¢y
        with open(local_file_path, "wb") as f:
            f.write(response.content)
        logger.info(f"ƒê√£ t·∫£i {cloudinary_path} t·ª´ Cloudinary v·ªÅ {local_file_path}")
        return True
    except Exception as e:
        logger.error(f"L·ªói khi t·∫£i t·ª´ Cloudinary: {str(e)}")
        return False

# Kh·ªüi t·∫°o database
logger.info("Kh·ªüi t·∫°o database...")
if not os.path.exists("database.db"):
    logger.info("File database.db kh√¥ng t·ªìn t·∫°i, ƒëang t·∫°o file c·ª•c b·ªô...")
    open("database.db", "a").close()
    logger.info("ƒê√£ t·∫°o file database.db c·ª•c b·ªô")

logger.info("ƒêang t·∫£i database t·ª´ Cloudinary...")
success = download_from_cloudinary("database.db", "database.db")

try:
    conn = sqlite3.connect("database.db", check_same_thread=False)
    cursor = conn.cursor()
    logger.info("K·∫øt n·ªëi database th√†nh c√¥ng")
except Exception as e:
    logger.error(f"L·ªói khi k·∫øt n·ªëi database: {str(e)}")
    raise

# Ki·ªÉm tra v√† t·∫°o b·∫£ng
try:
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
    if cursor.fetchone() is None:
        cursor.execute('''
            CREATE TABLE users (
                user_id INTEGER PRIMARY KEY,
                balance REAL DEFAULT 0,
                last_bill TEXT,
                vip_expiry DATETIME
            )
        ''')
        logger.info("ƒê√£ t·∫°o b·∫£ng users")

    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='links'")
    if cursor.fetchone() is None:
        cursor.execute('''
            CREATE TABLE links (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                bypass_link TEXT UNIQUE,
                original_link TEXT,
                price REAL,
                vip_only INTEGER DEFAULT 0
            )
        ''')
        logger.info("ƒê√£ t·∫°o b·∫£ng links v·ªõi c·ªôt vip_only")

    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='transactions'")
    if cursor.fetchone() is None:
        cursor.execute('''
            CREATE TABLE transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount REAL,
                type TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        logger.info("ƒê√£ t·∫°o b·∫£ng transactions")

    conn.commit()
except Exception as e:
    logger.error(f"L·ªói khi ki·ªÉm tra/t·∫°o b·∫£ng: {str(e)}")
    raise

# H√†m g·ª≠i tin nh·∫Øn v·ªõi retry, h·ªó tr·ª£ parse_mode
def send_message_with_retry(bot, chat_id, text, retries=5, delay=2, parse_mode=None):
    for attempt in range(retries):
        try:
            bot.send_message(chat_id, text, timeout=60, parse_mode=parse_mode)  # TƒÉng timeout l√™n 60 gi√¢y
            logger.info(f"ƒê√£ g·ª≠i tin nh·∫Øn ƒë·∫øn {chat_id}")
            return
        except Exception as e:
            logger.error(f"L·ªói g·ª≠i tin nh·∫Øn (l·∫ßn {attempt + 1}): {str(e)}")
            if attempt < retries - 1:
                time.sleep(delay * (2 ** attempt))
            else:
                raise

# H√†m ti·ªán √≠ch cho VIP
def is_vip(user_id):
    try:
        cursor.execute("SELECT vip_expiry FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        if result and result[0]:
            expiry_date = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
            return expiry_date > datetime.now()
        return False
    except Exception as e:
        logger.error(f"L·ªói khi ki·ªÉm tra VIP: {str(e)}")
        return False

def set_vip(user_id, days=7):
    try:
        expiry_date = datetime.now() + timedelta(days=days)
        cursor.execute("UPDATE users SET vip_expiry = ? WHERE user_id = ?", (expiry_date.strftime("%Y-%m-%d %H:%M:%S"), user_id))
        conn.commit()
        upload_to_cloudinary("database.db", "database.db")
        logger.info(f"ƒê√£ ƒë·∫∑t VIP cho user {user_id}, h·∫øt h·∫°n: {expiry_date}")
    except Exception as e:
        logger.error(f"L·ªói khi c·∫≠p nh·∫≠t VIP: {str(e)}")
        conn.rollback()

def get_vip_expiry(user_id):
    try:
        cursor.execute("SELECT vip_expiry FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        if result and result[0]:
            return datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
        return None
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y th·ªùi gian h·∫øt h·∫°n VIP: {str(e)}")
        return None

# H√†m ti·ªán √≠ch
def get_balance(user_id):
    try:
        cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        return result[0] if result else 0
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y s·ªë d∆∞: {str(e)}")
        return 0

def update_balance(user_id, amount):
    try:
        cursor.execute(
            "INSERT INTO users (user_id, balance) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET balance = balance + ?",
            (user_id, amount, amount))
        cursor.execute(
            "INSERT INTO transactions (user_id, amount, type) VALUES (?, ?, ?)",
            (user_id, amount, "deposit" if amount > 0 else "purchase"))
        conn.commit()
        upload_to_cloudinary("database.db", "database.db")
        logger.info("ƒê√£ c·∫≠p nh·∫≠t s·ªë d∆∞")
    except Exception as e:
        logger.error(f"L·ªói khi c·∫≠p nh·∫≠t s·ªë d∆∞: {str(e)}")
        conn.rollback()

def add_link(bypass_link, original_link, price, vip_only=0):
    try:
        cursor.execute(
            "INSERT INTO links (bypass_link, original_link, price, vip_only) VALUES (?, ?, ?, ?)",
            (bypass_link, original_link, price, vip_only))
        conn.commit()
        upload_to_cloudinary("database.db", "database.db")
        return "‚úÖ Link ƒë√£ ƒë∆∞·ª£c th√™m!"
    except sqlite3.IntegrityError:
        return "‚ö†Ô∏è Link n√†y ƒë√£ t·ªìn t·∫°i!"
    except Exception as e:
        logger.error(f"L·ªói khi th√™m link: {str(e)}")
        return "‚ùå ƒê√£ x·∫£y ra l·ªói!"

def get_link(bypass_link):
    try:
        cursor.execute("SELECT original_link, price, vip_only FROM links WHERE bypass_link = ?", (bypass_link,))
        return cursor.fetchone()
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y link: {str(e)}")
        return None

def format_currency(amount):
    return "{:,}".format(int(float(amount))).replace(",", ".")

# L·ªánh /start
@bot.message_handler(commands=["start"])
def send_welcome(message):
    user_id = message.chat.id
    logger.info(f"Nh·∫≠n l·ªánh /start t·ª´ user_id: {user_id}")
    try:
        cursor.execute("INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, 0)", (user_id,))
        conn.commit()
        logger.info(f"ƒê√£ th√™m ho·∫∑c b·ªè qua user_id {user_id} v√†o database")
    except Exception as e:
        logger.error(f"L·ªói khi th√™m user_id {user_id} v√†o database: {str(e)}")
        return
    send_message_with_retry(bot, message.chat.id, 
        "ü§ñ Ch√†o m·ª´ng ƒë·∫øn BOT mua link!\nüí∞ /nap_tien - N·∫°p ti·ªÅn\nüîç /so_du - Ki·ªÉm tra s·ªë d∆∞\nüõí /mua_link - Mua link\nüéñ /buy_vip - Mua VIP"
    )

# L·ªánh /vip
@bot.message_handler(commands=["vip"])
def check_vip(message):
    user_id = message.chat.id
    if is_vip(user_id):
        expiry_date = get_vip_expiry(user_id)
        expiry_str = expiry_date.strftime("%d/%m/%Y %H:%M:%S")
        send_message_with_retry(bot, user_id, f"üéñ B·∫°n l√† th√†nh vi√™n VIP!\n‚è≥ H·∫øt h·∫°n: {expiry_str}\nüéÅ B·∫°n c√≥ th·ªÉ mua t·∫•t c·∫£ c√°c link v·ªõi gi√° 0 VND.")
    else:
        send_message_with_retry(bot, user_id, "‚ùå B·∫°n ch∆∞a l√† th√†nh vi√™n VIP. D√πng /buy_vip ƒë·ªÉ n√¢ng c·∫•p (hi·ªáu l·ª±c 7 ng√†y)!")

# L·ªánh /buy_vip
@bot.message_handler(commands=["buy_vip"])
def buy_vip(message):
    user_id = message.chat.id
    vip_price = 59000
    balance = get_balance(user_id)

    if is_vip(user_id):
        expiry_date = get_vip_expiry(user_id)
        expiry_str = expiry_date.strftime("%d/%m/%Y %H:%M:%S")
        send_message_with_retry(bot, user_id, f"üéñ B·∫°n ƒë√£ l√† th√†nh vi√™n VIP r·ªìi!\n‚è≥ H·∫øt h·∫°n: {expiry_str}")
        return

    if balance < vip_price:
        shortfall = vip_price - balance
        send_message_with_retry(bot, user_id, 
            f"‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß!\n"
            f"üíµ Gi√° VIP: {format_currency(vip_price)} VND\n"
            f"üí∞ S·ªë d∆∞: {format_currency(balance)} VND\n"
            f"üìâ B·∫°n c·∫ßn n·∫°p th√™m: {format_currency(shortfall)} VND\n"
            f"üëâ D√πng /nap_tien ƒë·ªÉ n·∫°p."
        )
        return

    update_balance(user_id, -vip_price)
    set_vip(user_id, days=7)
    expiry_date = get_vip_expiry(user_id)
    expiry_str = expiry_date.strftime("%d/%m/%Y %H:%M:%S")
    send_message_with_retry(bot, user_id, 
        f"üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ tr·ªü th√†nh th√†nh vi√™n VIP.\n"
        f"‚è≥ H·∫øt h·∫°n: {expiry_str}\n"
        f"üí∞ S·ªë d∆∞ c√≤n l·∫°i: {format_currency(get_balance(user_id))} VND\n"
        f"üéÅ B·∫°n c√≥ th·ªÉ mua t·∫•t c·∫£ c√°c link v·ªõi gi√° 0 VND trong 7 ng√†y!"
    )

# L·ªánh /so_du
@bot.message_handler(commands=["so_du"])
def check_balance(message):
    user_id = message.chat.id
    balance = get_balance(user_id)
    formatted_balance = format_currency(balance)
    if is_vip(user_id):
        expiry_date = get_vip_expiry(user_id)
        expiry_str = expiry_date.strftime("%d/%m/%Y %H:%M:%S")
        vip_status = f"üéñ VIP - Mua link mi·ªÖn ph√≠\n‚è≥ H·∫øt h·∫°n: {expiry_str}"
    else:
        vip_status = "‚ùå Kh√¥ng ph·∫£i VIP\n‚úÖ VIP c√≥ th·ªÉ mua t·∫•t c·∫£ c√°c link v·ªõi gi√° 0VND!\n‚úÖ L·∫•y Link ho·∫∑c File ch·ªâ d√†nh cho VIP !!!"
    send_message_with_retry(bot, message.chat.id, f"üí∞ S·ªë d∆∞ c·ªßa b·∫°n: {formatted_balance} VND\n\n{vip_status}")

# L·ªánh /nap_tien
@bot.message_handler(commands=["nap_tien"])
def deposit_money(message):
    user_id = message.chat.id
    content = f"NAP{user_id}"
    qr_code_url = f"https://img.vietqr.io/image/ICB-109878256183-compact.png?amount=100000&addInfo={content}"
    msg_text = ("üíµ ƒê·ªÉ n·∫°p ti·ªÅn, vui l√≤ng chuy·ªÉn kho·∫£n:\n"
                "üè¶ *VIETTINBANK*\nüìå STK: `109878256183`\nüë§ TTK: *CAO DINH TUAN ANH*\n"
                f"üí¨ N·ªôi dung: `{content}`\n\n‚úÖ N·∫†P T·ªêI THI·ªÇU 10k\n‚úÖ G·ª¨I BILL ƒê·ªÇ X√ÅC NH·∫¨N")
    send_message_with_retry(bot, message.chat.id, msg_text, parse_mode="MarkdownV2")
    bot.send_photo(message.chat.id, qr_code_url, caption="üìå Qu√©t QR ƒë·ªÉ n·∫°p nhanh!\n‚úÖ G·ª¨I BILL ƒê·ªÇ X√ÅC NH·∫¨N")

# X·ª≠ l√Ω ·∫£nh bill
@bot.message_handler(content_types=["photo"])
def handle_bill_photo(message):
    user_id = message.chat.id
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    file = bot.download_file(file_info.file_path)
    cloudinary_response = cloudinary.uploader.upload(file, resource_type="image", public_id=f"bill_{user_id}")
    cursor.execute("INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, 0)", (user_id,))
    cursor.execute("UPDATE users SET last_bill = ? WHERE user_id = ?", (cloudinary_response["url"], user_id))
    conn.commit()
    send_message_with_retry(bot, message.chat.id, "‚úÖ Bill ƒë√£ ƒë∆∞·ª£c l∆∞u! Nh·∫•n /XACNHAN ƒë·ªÉ g·ª≠i.")

# L·ªánh /XACNHAN
@bot.message_handler(commands=["XACNHAN"])
def confirm_deposit(message):
    user_id = message.chat.id
    cursor.execute("SELECT last_bill FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result or not result[0]:
        send_message_with_retry(bot, message.chat.id, "‚ùå B·∫°n ch∆∞a g·ª≠i ·∫£nh bill.")
        return
    bill_photo = result[0]
    bot.send_photo(ADMIN_ID, bill_photo, caption=f"üîî *X√°c nh·∫≠n n·∫°p ti·ªÅn*\nüë§ User ID: {user_id}\n- /confirm{user_id} : X√°c nh·∫≠n v√† c·ªông ti·ªÅn\n- /deny{user_id} : T·ª´ ch·ªëi", parse_mode="Markdown")
    send_message_with_retry(bot, message.chat.id, "‚úÖ Bill ƒë√£ g·ª≠i, ch·ªù x√°c nh·∫≠n.")

# L·ªánh /confirm<user_id>
@bot.message_handler(regexp=r"^/confirm\d+$")
def handle_admin_confirm(message):
    if message.chat.id != ADMIN_ID:
        send_message_with_retry(bot, message.chat.id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn x√°c nh·∫≠n.")
        return
    user_id = message.text.replace("/confirm", "")
    msg = bot.send_message(ADMIN_ID, f"üí∞ Nh·∫≠p s·ªë ti·ªÅn mu·ªën c·ªông cho user {user_id}:", reply_markup=ForceReply())
    bot.register_next_step_handler(msg, process_add_money, user_id)

def process_add_money(message, user_id):
    if message.chat.id != ADMIN_ID:
        send_message_with_retry(bot, message.chat.id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.")
        return
    try:
        amount = int(message.text)
        update_balance(int(user_id), amount)
        cursor.execute("UPDATE users SET last_bill = NULL WHERE user_id = ?", (user_id,))
        conn.commit()
        balance = get_balance(user_id)
        formatted_balance = format_currency(balance)
        send_message_with_retry(bot, user_id, f"‚úÖ N·∫°p ti·ªÅn th√†nh c√¥ng! {amount:,} VND ƒë√£ ƒë∆∞·ª£c c·ªông. S·ªë d∆∞: {formatted_balance} VND\nüëâ /start")
        send_message_with_retry(bot, ADMIN_ID, f"‚úî ƒê√£ c·ªông {amount:,} VND cho user {user_id}")
    except ValueError:
        send_message_with_retry(bot, ADMIN_ID, "‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Nh·∫≠p s·ªë nguy√™n.")
    except Exception as e:
        send_message_with_retry(bot, ADMIN_ID, f"‚ùå L·ªói: {str(e)}")

# L·ªánh /deny<user_id>
@bot.message_handler(regexp=r"^/deny\d+$")
def handle_admin_deny(message):
    if message.chat.id != ADMIN_ID:
        send_message_with_retry(bot, message.chat.id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn t·ª´ ch·ªëi.")
        return
    user_id = message.text.replace("/deny", "")
    cursor.execute("UPDATE users SET last_bill = NULL WHERE user_id = ?", (user_id,))
    conn.commit()
    upload_to_cloudinary("database.db", "database.db")
    send_message_with_retry(bot, user_id, "‚ùå Y√™u c·∫ßu n·∫°p ti·ªÅn ƒë√£ b·ªã t·ª´ ch·ªëi.")
    send_message_with_retry(bot, ADMIN_ID, f"‚úÖ ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu c·ªßa user {user_id}")

# L·ªánh /mua_link
@bot.message_handler(commands=["mua_link"])
def mua_link_step1(message):
    send_message_with_retry(bot, message.chat.id, "üîó Nh·∫≠p link v∆∞·ª£t b·∫°n mu·ªën mua:")
    bot.register_next_step_handler(message, mua_link_step2)

def mua_link_step2(message):
    link_vuot = message.text
    user_id = message.chat.id
    link_data = get_link(link_vuot)
    if not link_data:
        send_message_with_retry(bot, message.chat.id, "‚ùå Link kh√¥ng t·ªìn t·∫°i.")
        return
    original_link, price, vip_only = link_data

    if vip_only and not is_vip(user_id):
        send_message_with_retry(bot, message.chat.id, "‚ùå Link n√†y ch·ªâ d√†nh cho th√†nh vi√™n VIP! D√πng /buy_vip ƒë·ªÉ n√¢ng c·∫•p.")
        return

    if is_vip(user_id):
        price = 0
        send_message_with_retry(bot, user_id, "üéñ B·∫°n l√† VIP, ƒë∆∞·ª£c mua link n√†y v·ªõi gi√° 0 VND!")
    else:
        balance = get_balance(user_id)
        if balance < price:
            shortfall = price - balance
            formatted_price = format_currency(price)
            formatted_balance = format_currency(balance)
            formatted_shortfall = format_currency(shortfall)
            send_message_with_retry(bot, message.chat.id, 
                f"‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß!\n"
                f"üíµ Gi√°: {formatted_price} VND\n"
                f"üí∞ S·ªë d∆∞: {formatted_balance} VND\n"
                f"üìâ B·∫°n c·∫ßn n·∫°p th√™m: {formatted_shortfall} VND ƒë·ªÉ ƒë·ªß ti·ªÅn mua link n√†y."
            )
            return

    update_balance(user_id, -price)
    time.sleep(1)  # TƒÉng ƒë·ªô tr·ªÖ l√™n 1 gi√¢y ƒë·ªÉ tr√°nh gi·ªõi h·∫°n
    send_message_with_retry(bot, message.chat.id, 
        f"üéâ Mua th√†nh c√¥ng!\n"
        f"üîó Link: {original_link}\n"
        f"üí∞ S·ªë d∆∞ c√≤n l·∫°i: {format_currency(get_balance(user_id))} VND"
    )

# L·ªánh /admin
@bot.message_handler(commands=["admin"])
def admin_menu(message):
    if message.chat.id != ADMIN_ID:
        send_message_with_retry(bot, message.chat.id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.")
        return
    send_message_with_retry(bot, message.chat.id, 
        "üë®‚Äçüíª **Menu Admin**\n"
        "- /add_link : Th√™m link\n"
        "- /delete_link : X√≥a link\n"
        "- /list_users : Danh s√°ch ng∆∞·ªùi d√πng\n"
        "- /list_links : Danh s√°ch link\n"
        "- /adjust_balance : ƒêi·ªÅu ch·ªânh s·ªë d∆∞\n"
        "- /set_vip : C·∫•p/x√≥a VIP\n"
        "- /announcement : G·ª≠i th√¥ng b√°o"
    )

# L·ªánh /set_vip
@bot.message_handler(commands=["set_vip"])
def admin_set_vip_step1(message):
    if message.chat.id != ADMIN_ID:
        send_message_with_retry(bot, message.chat.id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn.")
        return
    msg = bot.send_message(ADMIN_ID, "üë§ Nh·∫≠p ID ng∆∞·ªùi d√πng:")
    bot.register_next_step_handler(msg, admin_set_vip_step2)

def admin_set_vip_step2(message):
    user_id = message.text
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        send_message_with_retry(bot, message.chat.id, "‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.")
        return
    msg = bot.send_message(ADMIN_ID, "‚è≥ Nh·∫≠p s·ªë ng√†y VIP (0 ƒë·ªÉ x√≥a):")
    bot.register_next_step_handler(msg, admin_set_vip_step3, user_id)

def admin_set_vip_step3(message, user_id):
    try:
        days = int(message.text)
        if days < 0:
            send_message_with_retry(bot, ADMIN_ID, "‚ùå S·ªë ng√†y kh√¥ng h·ª£p l·ªá.")
            return
        if days == 0:
            cursor.execute("UPDATE users SET vip_expiry = NULL WHERE user_id = ?", (user_id,))
            conn.commit()
            upload_to_cloudinary("database.db", "database.db")
            send_message_with_retry(bot, ADMIN_ID, f"‚úÖ ƒê√£ x√≥a VIP c·ªßa user {user_id}")
            send_message_with_retry(bot, int(user_id), "‚ùå B·∫°n kh√¥ng c√≤n l√† th√†nh vi√™n VIP.")
        else:
            set_vip(int(user_id), days)
            expiry_date = get_vip_expiry(user_id)
            expiry_str = expiry_date.strftime("%d/%m/%Y %H:%M:%S")
            send_message_with_retry(bot, ADMIN_ID, f"‚úÖ ƒê√£ c·∫•p VIP cho user {user_id}, h·∫øt h·∫°n: {expiry_str}")
            send_message_with_retry(bot, int(user_id), f"üéñ B·∫°n ƒë√£ ƒë∆∞·ª£c c·∫•p VIP!\n‚è≥ H·∫øt h·∫°n: {expiry_str}")
    except ValueError:
        send_message_with_retry(bot, ADMIN_ID, "‚ùå Gi√° tr·ªã kh√¥ng h·ª£p l·ªá.")
    except Exception as e:
        send_message_with_retry(bot, ADMIN_ID, f"‚ùå L·ªói: {str(e)}")

# L·ªánh /add_link
@bot.message_handler(commands=["add_link"])
def admin_add_link_step1(message):
    if message.chat.id != ADMIN_ID:
        send_message_with_retry(bot, message.chat.id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn.")
        return
    msg = bot.send_message(ADMIN_ID, "üîó Nh·∫≠p link v∆∞·ª£t:")
    bot.register_next_step_handler(msg, admin_add_link_step2)

def admin_add_link_step2(message):
    bypass_link = message.text
    msg = bot.send_message(ADMIN_ID, "üîó Nh·∫≠p link origen:")
    bot.register_next_step_handler(msg, admin_add_link_step3, bypass_link)

def admin_add_link_step3(message, bypass_link):
    original_link = message.text
    msg = bot.send_message(ADMIN_ID, "üí∞ Nh·∫≠p gi√° (VND):")
    bot.register_next_step_handler(msg, admin_add_link_step4, bypass_link, original_link)

def admin_add_link_step4(message, bypass_link, original_link):
    try:
        price = int(message.text)
        msg = bot.send_message(ADMIN_ID, "üéñ Link ch·ªâ d√†nh cho VIP? (1 = C√≥, 0 = Kh√¥ng):")
        bot.register_next_step_handler(msg, admin_add_link_step5, bypass_link, original_link, price)
    except ValueError:
        send_message_with_retry(bot, ADMIN_ID, "‚ùå Gi√° ph·∫£i l√† s·ªë nguy√™n.")

def admin_add_link_step5(message, bypass_link, original_link, price):
    try:
        vip_only = int(message.text)
        if vip_only not in [0, 1]:
            send_message_with_retry(bot, ADMIN_ID, "‚ùå Ch·ªâ nh·∫≠p 0 ho·∫∑c 1.")
            return
        result = add_link(bypass_link, original_link, price, vip_only)
        vip_text = " (Ch·ªâ d√†nh cho VIP)" if vip_only else ""
        send_message_with_retry(bot, ADMIN_ID, f"{result}{vip_text}")
    except ValueError:
        send_message_with_retry(bot, ADMIN_ID, "‚ùå Gi√° tr·ªã kh√¥ng h·ª£p l·ªá.")

# L·ªánh /delete_link
@bot.message_handler(commands=["delete_link"])
def admin_delete_link(message):
    if message.chat.id != ADMIN_ID:
        send_message_with_retry(bot, message.chat.id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn.")
        return
    msg = bot.send_message(ADMIN_ID, "üîó Nh·∫≠p link v∆∞·ª£t c·∫ßn x√≥a:")
    bot.register_next_step_handler(msg, process_delete_link)

def process_delete_link(message):
    bypass_link = message.text
    cursor.execute("DELETE FROM links WHERE bypass_link = ?", (bypass_link,))
    conn.commit()
    if cursor.rowcount > 0:
        upload_to_cloudinary("database.db", "database.db")
        send_message_with_retry(bot, message.chat.id, f"‚úÖ ƒê√£ x√≥a link: {bypass_link}")
    else:
        send_message_with_retry(bot, message.chat.id, "‚ùå Link kh√¥ng t·ªìn t·∫°i.")

# L·ªánh /list_users
@bot.message_handler(commands=["list_users"])
def list_users(message):
    if message.chat.id != ADMIN_ID:
        send_message_with_retry(bot, message.chat.id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn.")
        return
    cursor.execute("SELECT user_id, balance, vip_expiry FROM users WHERE balance > 0")
    users = cursor.fetchall()
    if not users:
        send_message_with_retry(bot, message.chat.id, "‚ùå Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o c√≥ s·ªë d∆∞ l·ªõn h∆°n 0.")
        return

    user_list = "üìã Danh s√°ch ng∆∞·ªùi d√πng (S·ªë d∆∞ > 0):\n"
    for user_id, balance, vip_expiry in users:
        vip_status = "üéñ VIP" if is_vip(user_id) else "‚ùå Kh√¥ng VIP"
        if vip_expiry and is_vip(user_id):
            expiry_date = datetime.strptime(vip_expiry, "%Y-%m-%d %H:%M:%S")
            expiry_str = expiry_date.strftime("%d/%m/%Y %H:%M:%S")
            vip_info = f" - H·∫øt h·∫°n: {expiry_str}"
        else:
            vip_info = ""
        user_list += f"- ID: {user_id}, S·ªë d∆∞: {format_currency(balance)} VND, {vip_status}{vip_info}\n"

    file = io.BytesIO(user_list.encode('utf-8'))
    file.name = "user_list.txt"
    bot.send_document(message.chat.id, file, caption="üìã Danh s√°ch ng∆∞·ªùi d√πng (S·ªë d∆∞ > 0)")
    file.close()

# L·ªánh /list_links
@bot.message_handler(commands=["list_links"])
def list_links(message):
    if message.chat.id != ADMIN_ID:
        send_message_with_retry(bot, message.chat.id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn.")
        return
    cursor.execute("SELECT bypass_link, original_link, price, vip_only FROM links")
    links = cursor.fetchall()
    if not links:
        send_message_with_retry(bot, message.chat.id, "‚ùå Kh√¥ng c√≥ link.")
        return
    link_list = "üîó *Danh s√°ch link:*\n\n"
    for idx, (bypass_link, original_link, price, vip_only) in enumerate(links, 1):
        vip_text = " (Ch·ªâ VIP)" if vip_only else ""
        link_list += (f"{idx}. **Link v∆∞·ª£t**: `{escape_markdown(bypass_link)}`\n"
                      f"   **Link g·ªëc**: `{escape_markdown(original_link)}`\n"
                      f"   **Gi√°**: `{format_currency(price)} VND`{vip_text}\n\n")
    send_message_with_retry(bot, message.chat.id, link_list, parse_mode="Markdown")

# L·ªánh /adjust_balance
@bot.message_handler(commands=["adjust_balance"])
def admin_adjust_balance_step1(message):
    if message.chat.id != ADMIN_ID:
        send_message_with_retry(bot, message.chat.id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn.")
        return
    msg = bot.send_message(ADMIN_ID, "üë§ Nh·∫≠p ID ng∆∞·ªùi d√πng:")
    bot.register_next_step_handler(msg, admin_adjust_balance_step2)

def admin_adjust_balance_step2(message):
    user_id = message.text
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        send_message_with_retry(bot, message.chat.id, "‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.")
        return
    msg = bot.send_message(ADMIN_ID, "üí∞ Nh·∫≠p s·ªë ti·ªÅn (d∆∞∆°ng ƒë·ªÉ c·ªông, √¢m ƒë·ªÉ tr·ª´):")
    bot.register_next_step_handler(msg, admin_adjust_balance_step3, user_id)

def admin_adjust_balance_step3(message, user_id):
    try:
        amount = int(message.text)
        update_balance(int(user_id), amount)
        send_message_with_retry(bot, ADMIN_ID, f"‚úÖ ƒê√£ ƒëi·ªÅu ch·ªânh s·ªë d∆∞ cho user {user_id}. S·ªë d∆∞ m·ªõi: {format_currency(get_balance(user_id))} VND")
    except ValueError:
        send_message_with_retry(bot, ADMIN_ID, "‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.")
    except Exception as e:
        send_message_with_retry(bot, ADMIN_ID, f"‚ùå L·ªói: {str(e)}")

# L·ªánh /announcement
@bot.message_handler(commands=["announcement"])
def admin_announcement(message):
    if message.chat.id != ADMIN_ID:
        send_message_with_retry(bot, message.chat.id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn.")
        return
    msg = bot.send_message(ADMIN_ID, "üì¢ Nh·∫≠p n·ªôi dung th√¥ng b√°o:")
    bot.register_next_step_handler(msg, process_announcement)

def process_announcement(message):
    content = message.text
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    if not users:
        send_message_with_retry(bot, ADMIN_ID, "‚ùå Kh√¥ng c√≥ ng∆∞·ªùi d√πng ƒë·ªÉ g·ª≠i th√¥ng b√°o.")
        return
    success_count = 0
    for (user_id,) in users:
        try:
            send_message_with_retry(bot, user_id, f"üì¢ *Th√¥ng b√°o t·ª´ BIGCHANG:*\n{content}", parse_mode="Markdown")
            success_count += 1
            time.sleep(1)  # TƒÉng ƒë·ªô tr·ªÖ l√™n 1 gi√¢y ƒë·ªÉ tr√°nh gi·ªõi h·∫°n
        except:
            pass
    send_message_with_retry(bot, ADMIN_ID, f"‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn {success_count} ng∆∞·ªùi d√πng.")

# Gi·ªØ bot ch·∫°y
def keep_alive():
    t = Thread(target=run)
    t.start()

# Kh·ªüi ƒë·ªông bot
if __name__ == "__main__":
    logger.info("Bot ƒëang kh·ªüi ƒë·ªông...")
    keep_alive()
    while True:
        try:
            bot.polling(none_stop=True, interval=0, timeout=60)  # TƒÉng timeout l√™n 60 gi√¢y
        except Exception as e:
            logger.error(f"L·ªói polling: {str(e)}")
            time.sleep(5)  # Ch·ªù 5 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
